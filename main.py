import json
import os
import logging
import requests
import sys
import argparse

from dotenv import load_dotenv

load_dotenv(override=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    filename="app.log",
    filemode="w",
    encoding="utf-8"
)



def send_telegram_message(text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞.
    """
    token = os.getenv("BOT_TOKEN")
    chat_id = os.getenv("BOT_CHAT_ID")
    thread_id = os.getenv("BOT_THREAD_ID")
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    if thread_id:
        data["message_thread_id"] = thread_id
    try:
        resp = requests.post(url, data=data)
        resp.raise_for_status()
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")



def get_config(json_file: str="config.json") -> dict | None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    Args:
        json_file: str
    Returns:
        dict | None: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        with open(json_file, "r") as f:
            config = json.load(f)
        logging.info("–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return config
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüìé<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>")
        return None



def init_session(config: dict) -> requests.Session | None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º.
    Args:
        config: dict
    Returns:
        requests.Session | None: –°–µ—Å—Å–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        session = requests.Session()
        session.get(os.getenv("BASE_URL"))
        logging.info("–°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return session
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüìé<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>")
        return None



def authorize(session: requests.Session) -> bool:
    """
    –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.
    Args:
        session: requests.Session
    Returns:
        bool: True –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        payload = {
            "login": os.getenv("LOGIN"),
            "password": os.getenv("PASSWORD"),
            "save_password": "on",
        }
        response = session.post(os.path.join(os.getenv("BASE_URL"), "auth-ajax_login"), data=payload)
        response.raise_for_status()
        logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        if response.json().get("errors"):
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.json()['errors']}")
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüìé<b>–û—à–∏–±–∫–∞:</b><i>{response.json()['errors']}</i>")
            return False
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüìé<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>")
        return False



def upload_file(session: requests.Session, config: dict, file_path: str) -> str | None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–∞–π—Ç.
    Args:
        session: requests.Session
        config: dict
        file_path: str
    Returns:
        str | None: –ò–º—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    url = os.path.join(os.getenv("BASE_URL"), "supplier_answer-load_answer_file")
    try:
        with open(file_path, "rb") as f:
            files = {
                "order_answer_file": (file_path, f, "application/vnd.ms-excel")
            }
            upload_response = session.post(url, files=files)
            upload_response.raise_for_status()
        logging.info("–§–∞–π–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        upload_data = upload_response.json()
        return upload_data["data"]["file_name"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüìé<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>")
        return None



def process_file(session: requests.Session, file_name: str, file_path: str, config: dict) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–∞–π—Ç–µ.
    Args:
        session: requests.Session
        file_name: str
        file_path: str
        config: dict
    """
    proc_url = os.path.join(os.getenv("BASE_URL"), "supplier_answer-proc_answer_file")
    proc_data = {
        "order_id_col": config["order_id_col"],  # –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è "‚Ññ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞"
        "quantity_col": config["quantity_col"],  # –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        "order_product_id_col": config["order_product_id_col"],  # –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è "–ö–æ–¥ –ø–æ–∑–∏—Ü–∏–∏"
        "file_name": file_name,
        "cancel_reason": "",
        "dataType": "json"
    }
    try:
        proc_response = session.post(proc_url, data=proc_data)
        proc_response.raise_for_status()
        try:
            resp_obj = proc_response.json()
            pretty = json.dumps(resp_obj, ensure_ascii=False, indent=2)
            logging.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{pretty}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if str(resp_obj.get("status_code")) == "0":
                fname = os.path.basename(file_path)
                send_telegram_message(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\nüìé<b>–§–∞–π–ª:</b><i>{fname}</i>")
            else:
                send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüìé<b>–û—à–∏–±–∫–∞:</b><i>{resp_obj.get('err_msg', resp_obj)}</i>")
        except Exception:
            logging.info(proc_response.text)
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüìé<b>–û—à–∏–±–∫–∞:</b><i>{proc_response.text}</i>")
        print(proc_response.text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüìé<b>–û—à–∏–±–∫–∞:</b><i>{e}</i>")



def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(
        description='–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
        epilog='–ü—Ä–∏–º–µ—Ä: python main.py "C:\\path\\to\\file.xls"'
    )
    parser.add_argument(
        'file_path', 
        nargs='?',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (.xls)'
    )
    
    args = parser.parse_args()
    
    config = get_config()
    if not config:
        return
    
    # –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ config
    if args.file_path:
        file_path = args.file_path
        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {file_path}")
    else:
        if "confirmation_file_path" not in config:
            error_msg = "–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∏ –≤ config.json"
            logging.error(error_msg)
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüìé<b>–û—à–∏–±–∫–∞:</b><i>{error_msg}</i>")
            return
        file_path = config["confirmation_file_path"]
        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {file_path}")
    
    session = init_session(config)
    if not session:
        return
    if not authorize(session):
        return
    file_name = upload_file(session, config, file_path)
    if not file_name:
        return
    process_file(session, file_name, file_path, config)



if __name__ == "__main__":
    main()